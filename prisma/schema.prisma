// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    email           String?   @unique
    emailVerified   DateTime?
    image           String
    accounts        Account[]
    sessions        Session[]
    createdQuizzes  Quiz[]    @relation("createdQuizzes")
    savedQuizzes    Quiz[]    @relation(name: "savedQuizzes", fields: [savedQuizzesIDs], references: [id])
    savedQuizzesIDs String[]  @db.ObjectId
    likedQuizzes    Quiz[]    @relation(name: "likedQuizzes", fields: [likedQuizzesIDs], references: [id])
    likedQuizzesIDs String[]  @db.ObjectId
    seenQuizzes     Quiz[]    @relation(name: "seenQuizzes", fields: [seendQuizzesIDs], references: [id])
    seendQuizzesIDs String[]  @db.ObjectId
    views           View[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Quiz {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    questions   Question[]
    comments    Comment[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    authorId    String     @db.ObjectId
    author      User       @relation(name: "createdQuizzes", fields: [authorId], references: [id])
    savedBy     User[]     @relation(name: "savedQuizzes", fields: [savedByIDs], references: [id])
    savedByIDs  String[]   @db.ObjectId
    likedBy     User[]     @relation(name: "likedQuizzes", fields: [likedByIDs], references: [id])
    likedByIDs  String[]   @db.ObjectId
    seenBy      User[]     @relation(name: "seenQuizzes", fields: [seenByIDs], references: [id])
    seenByIDs   String[]   @db.ObjectId
    views       View[]
}

model View {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    quizId    String   @db.ObjectId
    quiz      Quiz     @relation(fields: [quizId], references: [id])
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

type Question {
    question String
    options  Option[]
}

type Option {
    option    String
    isCorrect Boolean
}

type Comment {
    authorId String @db.ObjectId
    text     String
}
